//
//  CartViewController.swift
//  Webshop
//
//  Created by Geszti Bence on 2020. 11. 07..
//  Copyright (c) 2020. gesben. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class CartViewController: BaseTabbarProtocolController {

    // MARK: - Public properties -
    
    override var tabbarImage: UIImage? {
        UIImage(named: "cart")
    }
    
    override var selectedTabbarImage: UIImage? {
        UIImage(named: "cartGray")
    }

    var presenter: CartPresenterInterface!
    
    private var tableView: UITableView!
    private var successView: FinishOrderView!
    private var orderButton: FooterButtonView!
    private var indicator: UIActivityIndicatorView!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        navigationItem.title =  "Cart".localized
        setup()
        presenter.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.navigationBar.setBackgroundImage(nil, for: .default)
        navigationController?.navigationBar.shadowImage = nil
        navigationController?.navigationBar.isTranslucent = true
        
        hideEmptyView()
        
        if successView != nil {
            successView.isHidden = true
            view.willRemoveSubview(successView)
            successView = nil
        }
        
        if tableView != nil {
            presenter.viewDidLoad()
        }
    }
    
    private func setup() {
        initTableView()
        initIndicator()
    }
    
    private func initTableView() {
        tableView = UITableView(frame: .zero, style: .plain)
        tableView.separatorStyle = .singleLine
        tableView.dataSource = self
        tableView.delegate = self
        tableView.backgroundColor = .clear
        tableView.clipsToBounds = true
        tableView.register(cellWithClass: CartCell.self)
        tableView.showsHorizontalScrollIndicator = false
        tableView.showsVerticalScrollIndicator = false
        tableView.isHidden = true
        orderButton = FooterButtonView(frame: .zero)
        orderButton.frame = CGRect(x: 0, y: 0, width: view.frame.size.width, height: 200.0)
        orderButton.bind("Cart.FinishOrder".localized)
        orderButton.delegate = self
        tableView.tableFooterView = orderButton
    
        view.addSubview(tableView)
        tableView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
    }
    
    private func initIndicator() {
       indicator = UIActivityIndicatorView()
       indicator.style = .gray
       view.addSubview(indicator)
       indicator.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.centerY.equalTo(orderButton.snp.top).offset(22.0)
        }
    }

}

// MARK: - Extensions -

extension CartViewController: CartViewInterface {
    func stopAnimation() {
        indicator.stopAnimating()
        UIView.animate(withDuration: 0.3) {
            self.orderButton.alpha = 1.0
        }
    }
    
    func showFinishOrder() {
        indicator.stopAnimating()
        successView = FinishOrderView()
        view.addSubview(successView)
        successView.snp.makeConstraints { make in
            make.centerX.centerY.equalToSuperview()
        }
        UIView.transition(with: view, duration: 0.3, options: .transitionCrossDissolve) {
            self.tableView.reloadData()
            self.tableView.isHidden = true
        }
        hideEmptyView()
    }
    
    func removeProduct(row: Int) {
        tableView.deleteRows(at: [IndexPath(row: row, section: 0)], with: .fade)
        UIView.transition(with: view, duration: 0.3, options: .transitionCrossDissolve) {
            self.emptyView()
        }
    }
    
    func reload() {
        UIView.transition(with: view, duration: 0.3, options: .transitionCrossDissolve) {
            self.tableView.reloadData()
            self.tableView.layoutIfNeeded()
            self.emptyView()
        }
    }
    
    private func emptyView() {
        if presenter.getProductsCount() == 0 {
            tableView.isHidden = true
            showEmptyView(titleText: "Cart.Empty".localized )
        } else {
            tableView.isHidden = false
            hideEmptyView()
        }
    }
    
}

extension CartViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        presenter.getProductsCount()
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withClass: CartCell.self)
        let model = presenter.getItem(row: indexPath.row)
        if model.title != nil || model.title != "" {
            cell.bind(model: model)
        }
        return cell
    }
    
    func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        let deleteAction = UIContextualAction(style: .destructive, title: "Delete".localized ) {  (contextualAction, view, boolValue) in
            self.presenter.removeProduct(row: indexPath.row)
        }
        
        let swipeActions = UISwipeActionsConfiguration(actions: [deleteAction])
        
        return swipeActions
    }
    
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        true
    }
}

extension CartViewController: FooterButtonViewDelegate {
    func footerButtonTapped() {
        UIView.animate(withDuration: 0.3) {
            self.orderButton.alpha = 0.0
        } completion: { _ in
            self.indicator.startAnimating()
        }
        
        presenter.orderButtonTapped()
    }
}
