//
//  ProductPresenter.swift
//  Webshop
//
//  Created by Geszti Bence on 2020. 11. 01..
//  Copyright (c) 2020. gesben. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class ProductPresenter {

    // MARK: - Private properties -
    
    private var product: ProductModel?

    private unowned let view: ProductViewInterface
    private let interactor: ProductInteractorInterface
    private let wireframe: ProductWireframeInterface

    // MARK: - Lifecycle -

    init(view: ProductViewInterface, interactor: ProductInteractorInterface, wireframe: ProductWireframeInterface, product: ProductModel? = nil) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.product = product
    }
}

// MARK: - Extensions -

extension ProductPresenter: ProductPresenterInterface {
    func goToCart() {
        wireframe.goToCart()
    }
    
    func addToCartTapped() {
        guard let user = UserManager.shared.loggedInUser, let dressId = product?.id else { return }
        let dressData = DressData()
        dressData.cartId = user.cartId
        dressData.dressId = dressId
        dressData.quantity = 1
        interactor.add(data: dressData) { result in
            switch result {
            case .success(let response):
                self.view.stopAnimation(success: true)
            case .failure(let error):
                self.view.stopAnimation(success: false)
                log.error(error.localizedDescription)
            }
        }
    }
    
    func getProduct() -> ProductModel {
        product ?? ProductModel()
    }
    
}
