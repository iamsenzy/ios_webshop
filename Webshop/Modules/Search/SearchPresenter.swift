//
//  SearchPresenter.swift
//  Webshop
//
//  Created by Geszti Bence on 2020. 10. 17..
//  Copyright (c) 2020. GesBen. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class SearchPresenter {

    // MARK: - Private properties -

    private unowned let view: SearchViewInterface
    private let interactor: SearchInteractorInterface
    private let wireframe: SearchWireframeInterface
    
    private var categories = Array.init(repeating: CategoryModel(), count: 6)

    // MARK: - Lifecycle -

    init(view: SearchViewInterface, interactor: SearchInteractorInterface, wireframe: SearchWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
    
    func viewDidLoad() {
        
        interactor.getCategories { [weak self] result in
            switch result {
            case .success(let categories):
                self?.categories = categories.data ?? []
                self?.view.reload()
            case .failure(let error):
                log.debug(error.localizedDescription)
            }
        }
        
    }
}

// MARK: - Extensions -

extension SearchPresenter: SearchPresenterInterface {
    func itemSelectedWithModel(_ model: CategoryModel) {
        wireframe.showSelectedCategory(category: model )
    }
    
    func itemSelected(_ row: Int) {
        wireframe.showSelectedCategory(category: categories[row] )
    }
    
    func getItems() -> [CategoryModel] {
        categories
    }
    
    func getItem(_ row: Int) -> CategoryModel {
        categories[row]
    }
    
    func getSearchCount() -> Int {
        categories.count
    }
    
}
